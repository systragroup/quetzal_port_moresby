[{"info": "Classic 4-steps model-Port-Moresby  ##########   Generation: the model is split between two segments (Car: can use a car, PT: cannot use a car). Car segment is multiplied by the motorization rate and PT segment is multiplied by the pt rate (1 - motorization rate). Productions and attractions can be corrected to match the calibration data by using the pa_correction toggle (production = population + correction_production and attraction = jobs + correction_attraction). The file pa_correction.csv which is used is located in the inputs and can be modified as desired. ##########  Distribution: each segment  undergo an independent distribution. By default, the free flow road time is used in the deterrence function for the car segment and the PT time is used for the PT segment. The productions and attractions of the zones can be set equal to P=A=0.5 * (P_initial+ A_initial). This will not necessarily yield a symetric matrix because the deterrence matrix is not symetric by default. Moreover, instead of the actual travel times, the distance as the crow flies (euclidean distance) can be used as a time proxy to gain better control over the distance distribution.  ##########  Mode Split: each segment undergo an independent itinerary choice and mode choice. The PT segment cannot use the car and only choses between the PT itinerary. The car segment can chose between car and PT itineraries based on their utility. The probability of each mode and itinerary is the result of a hierarchical logit, based on the utility of each itinerary. The utility is calculated, based on the time of each itinerary with a time scale of 1 utility point = 1800 seconds. An alternative specific constant (ASC = mode constant) is then added to each itinerary, based on the modes it uses.  ##########  Assignment: after the combined mode split - itinerary choice (hierarchical logit), the volumes of each segment are assigned to the PT itineraries based on the results of the logit. The volumes that remain on the road itineraries (private vehicles) are fed to an iterative assignment procedure to match the capacity constraints of the network." },{"category":"generation","params":[{"text":"correction_pa","value":false,"type":"Boolean","units":"","hint":"Add the values added to correction_production/correction_attraction columns from zones","rules":["required","nonNegative"],"name":"correction_pa"},{"text":"motor_rate","value":0.5,"type":"Number","units":"","hint":"Share of the population that can use a car","rules":["required","nonNegative"],"name":"motor_rate"},{"text":"pop_attraction","value":1.5,"type":"Number","units":"","hint":"Attraction rate per person (production)","rules":["required","nonNegative"],"name":"pop_attraction"},{"text":"job_attraction","value":0.5,"type":"Number","units":"","hint":"Attraction rate per job (attractions)","rules":["required","nonNegative"],"name":"job_attraction"},{"text":"pop_production","value":1.5,"type":"Number","units":"","hint":"Production rate per person (production)","rules":["required","nonNegative"],"name":"pop_production"},{"text":"job_production","value":0.5,"type":"Number","units":"","hint":"Production rate per job (attractions)","rules":["required","nonNegative"],"name":"job_production"} ],"model":"default"}, {"category":"step_distribution", "params": [{"text":"distance_distribution","value":false,"type":"Boolean", "units":"", "hint":"If this parameter is checked, the time used in the cost matrix (cost_matrix = ['origin', 'destination', 'time]) is calculated with a function of interzonal distance (time = euclidean_distance/5 + 300), otherwise the time used is the time calculated by the pathfinder.", "rules":["required"], "name":"distance_distribution"}, {"text":"symmetrize_matrix","value":false,"type":"Boolean", "units":"", "hint":"Symmetrize production/attraction", "rules":["required"], "name":"symmetrize_matrix"}, {"text":"n_car","value":1,"type":"Number", "units":"", "hint":"Value of power function (Car). Cost_matrix= cost_matrix.pow(n)* exp(-b*cost_matrix)", "rules":["required"], "name":"n_car"}, {"text":"n_pt", "value":1, "type":"Number", "units":"", "hint":"Value of power function (PT). Cost_matrix= cost_matrix.pow(n)* exp(-b*cost_matrix)", "rules":["required"], "name":"n_pt"}, {"text":"b_car","value":0.01,"type":"Number","units":"", "hint":"Value of exponential function (Car). Cost_matrix= cost_matrix.pow(n)* exp(-b*cost_matrix)", "rules":["required","nonNegative"], "name":"b_car"}, {"text":"b_pt","value":0.01,"type":"Number", "units":"","hint":"Value of exponential function (PT).  Cost_matrix= cost_matrix.pow(n)* exp(-b*cost_matrix)","rules":["required","nonNegative"],"name":"b_pt"}, {"text":"time_intrazonal_car","value":950, "type":"Number", "units":"seconds", "hint":"Intrazonal time (Car)", "rules":["required","nonNegative"], "name":"time_intrazonal_car"}, {"text":"time_intrazonal_pt","value":950, "type":"Number", "units":"seconds", "hint":"Intrazonal time (PT)", "rules":["required","nonNegative"], "name":"time_intrazonal_pt"}], "model":"default"},{"category":"pathfinder","params":[{"text":"cutoff","value":10800,"type":"Number","units":"seconds","hint":"Maximum time for PT itinirary","rules":["required","nonNegative"],"name":"cutoff"}], "model":"default"},{"category":"preparation_logit","params":[{"text":"time", "value": 30, "type":"Number", "units":"min/pt", "hint":"Utility value of time (for the calculation of the multiplicative factor for time in the utility function)", "rules":["required","Negative"], "name":"time"}, {"text":"price", "value": 15, "type":"Number", "units":"$/hr", "hint":"Monetary value of time (for the calculation of the multiplicative factor for cost in the utility function)", "rules":["required","Negative"], "name":"price"}, {"text":"transfers", "value": 10, "type":"Number", "units":"min/transfer", "hint":"Penalty coefficient for transfers", "rules":["required","Negative"], "name":"transfers"}], "model":"default"}, {"category":"logit","params":[{"text":"walking_cutoff", "value": 2700, "type":"Number", "units":"seconds", "hint":"Walking time cutoff", "rules":["required","nonNegative"], "name":"walking_cutoff"},{"text":"occupation_rate_car", "value": 1, "type":"Number", "units":"person per car", "hint":"car occupation rate", "rules":["required","nonNegative"], "name":"occupation_rate_car"},{"text":"time_perception_after_cutoff", "value": 2, "type":"Number", "units":"seconds", "hint":"Time perception factor after cutoff. (If time>walking_cutoff, then time=(time-walking_cutoff)*time_perception_after_cutoff", "rules":["required","nonNegative"], "name":"time_perception_after_cutoff"}], "model":"default"}, {"category":"mode_utility_car","params":[{"text":"car", "value": -2, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"car"},{"text":"walk", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Should be 0", "rules":["required"], "name":"walk"}, {"text":"bus", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"bus"},{"text":"express_bus", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"express_bus"},{"text":"tram", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"tram"}], "model":"default"}, {"category":"mode_utility_pt","params":[{"text":"walk", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Should be 0", "rules":["required"], "name":"walk"}, {"text":"bus", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"bus"},{"text":"express_bus", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"express_bus"},{"text":"tram", "value": 0, "type":"Number", "units":"utility points", "hint":"Modal constant. Typical range: [-5,5]", "rules":["required","Negative"], "name":"tram"}], "model":"default"}]
